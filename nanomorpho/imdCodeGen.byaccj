%token <sval> LITERAL,NAME,OP1,OP2,OP3,OP4,OP5,OP6,OP7,VAR,AND,OR,NOT,WHILE,IF,ELSIF,ELSE
%type <obj> program, function, funbody, expr, funargs, nonemptyargs, ifexpr, elsepart, body, expressions
%type <ival> names, nonemptynames, decl
%type <sval> op
%right '=' RETURN
%left AND
%left OR
%left NOT
%left OP1
%right OP2
%left OP3
%left OP4
%left OP5
%left OP6
%left OP7
%left UNOP


%%

start
        : program       { generateProgram(name, ((Vector<Object>)($1)).toArray(); }

program
        :       function
                {
                        $$=new Vector<Object>();
                        ((Vector<Object>)($$).add($1);
                }
        |       program function
                {
                        ((Vector<Object>)($1).add($2);
                        $$ = $1;
                }
        ;
        
function
        :       {
                        varcount = 0;
                        varTable = new HashMap<String, Integer>();
                }
                NAME '(' names ')' '{' decl funbody '}'
                {    // XXX check numbers
                        $$=new Object[]{ $2, $4, $7, ((Vector<Object>)($8)).toArray() };
                }
        ;

names
        :                       { $$ = 0; }
        |       nonemptynames
        ;

nonemptynames
        :       names ',' NAME  { addVar($1); $$ = $1 + 1 }
        |       NAME            { addVar($1); $$ = $1 + 1 }
        ;

decl    :       VAR names ';'           { $$ = $2; }
        |       decl VAR names ';'      { $$ = $1 + $3; }
        ;

// TODO empty decl
/*
decl    :                       { $$=0; }
        |       nonemptyvars    { $$=$1; }
        ;

nonemptyvars
        :       VAR names ';'           { $$ = $2; }
        |       decl VAR names ';'      { $$ = $1 + $3; }
        ;
*/

funbody
        :       expr ';'
                {
                        $$=new Vector<Object>();
                        ((Vector<Object>)($$).add($1);
                }
        |       funbody expr ';'
                {
                        ((Vector<Object>)($1).add($2);
                        $$ = $1;
                }
        ;
        
expr
        :       NAME                            { $$=new Object[] { "FETCH", findvar($1) }; }
        |       NAME '=' expr                   { $$=new Object[] { "STORE", findvar($1), $3 }; }
        |       NAME '(' funargs ')'            { $$=new Object[] { "CALL", $1, ((Vector<Object>)($3)).toArray(); } }
        |       expr OP1 expr                   { $$=new Object[] { "CALL", $2, $1, $2 }; }
        |       expr OP2 expr                   { $$=new Object[] { "CALL", $2, $1, $2 }; }
        |       expr OP3 expr   		{ $$=new Object[] { "CALL", $2, $1, $2 }; }
        |       expr OP4 expr   		{ $$=new Object[] { "CALL", $2, $1, $2 }; } 
        |       expr OP5 expr   		{ $$=new Object[] { "CALL", $2, $1, $2 }; }
        |       expr OP6 expr   		{ $$=new Object[] { "CALL", $2, $1, $2 }; }
        |       expr OP7 expr   		{ $$=new Object[] { "CALL", $2, $1, $2 }; }
	|	op expr %prec UNOP              { $$=new Object[] { "CALL", $1, $2 }; }
        |       expr AND expr   		{ $$=new Object[] { "AND", $1, $2 }; }
        |       expr OR expr    		{ $$=new Object[] { "OR", $1, $2 };  } 
        |       NOT expr        		{ $$=new Object[] { "NOT", $1 };     } 
	|	'(' expr ')'                    { $$ = $2; }
        |       ifexpr                          { $$=$1; }
        |       WHILE '(' expr ')' body         { $$=new Object[] { "WHILE", $3, $5 }; }
	|	LITERAL                         { $$=new Object[] { "LITERAL", $1 }; }
        |       RETURN expr                     { $$=new Object[] { "RETURN", $2 }; }
	;

funargs
        :                       { $$=null } // ??? consistent with code generator smallexpr?
        |       nonemptyargs    { $$=((Vector<Object>)($1)).toArray(); }
        ;

nonemptyargs
        :       expr
                {
                        $$=new Vector<Object>();
                        ((Vector<Object>)($$)).add($1);
                }
        |       nonemptyargs ',' expr
                {
                        ((Vector<Object>)($1)).add($3);
                        $$ = $1;
                }

ifexpr
        :       IF '(' expr ')' body elsepart
                {
                        $$=new Object[] { "IF", $3, $5, $6 };
                } 
        ;

elsepart
        :                                             { $$=null; }
        |       ELSIF '(' expr ')' body elsepart      { $$=new Object[] { "IF", $3, $5, $6 }; }
        |       ELSE body                             { $$=$2; }
        ;


body    :       '{' expressions '}' ; { $$=$2 }

expressions
        :       expr ';'
                {
                        $$=new Vector<Object>();
                        ((Vector<Object>)($$).add($1);
                }
        |       expressions expr ';'
                {
                        ((Vector<Object>)($1).add($2);
                        $$ = $1;
                }
        ;

op	:	OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7 ; { $$=$1; }

%%
