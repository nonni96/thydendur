/* The following code was generated by JFlex 1.7.0 */

/**
	JFlex scanner example based on a scanner for NanoLisp.
	Author: Snorri Agnarsson, 2017-2020

	This stand-alone scanner/lexical analyzer can be built and run using:
		java -jar JFlex-full-1.7.0.jar nanolexer.jflex
		javac NanoLexer.java
		java NanoLexer inputfile > outputfile
	Also, the program 'make' can be used with the proper 'makefile':
		make test
 */

import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>nanolexer.jflex</tt>
 */
public class NanoLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
<<<<<<< HEAD
    "\11\0\1\42\1\36\1\40\1\41\1\37\22\0\1\42\1\22\1\5"+
    "\2\0\2\22\1\14\2\17\1\22\1\4\1\17\1\4\1\2\1\22"+
    "\4\15\4\16\2\1\1\22\1\35\1\22\1\23\2\22\1\0\4\20"+
    "\1\3\25\20\1\0\1\6\1\0\1\22\1\20\1\0\1\27\1\7"+
    "\2\20\1\26\1\12\1\20\1\34\1\31\2\20\1\25\1\20\1\11"+
    "\3\20\1\13\1\30\1\10\1\24\1\32\1\33\3\20\1\17\1\21"+
    "\1\17\1\22\6\0\1\40\44\0\1\20\12\0\1\20\4\0\1\20"+
    "\5\0\27\20\1\0\37\20\1\0\u01ca\20\4\0\14\20\16\0\5\20"+
    "\7\0\1\20\1\0\1\20\201\0\5\20\1\0\2\20\2\0\4\20"+
    "\1\0\1\20\6\0\1\20\1\0\3\20\1\0\1\20\1\0\24\20"+
    "\1\0\123\20\1\0\213\20\10\0\246\20\1\0\46\20\2\0\1\20"+
    "\7\0\47\20\110\0\33\20\5\0\3\20\55\0\53\20\43\0\2\20"+
    "\1\0\143\20\1\0\1\20\17\0\2\20\7\0\2\20\12\0\3\20"+
    "\2\0\1\20\20\0\1\20\1\0\36\20\35\0\131\20\13\0\1\20"+
    "\30\0\41\20\11\0\2\20\4\0\1\20\5\0\26\20\4\0\1\20"+
    "\11\0\1\20\3\0\1\20\27\0\31\20\107\0\25\20\1\0\10\20"+
    "\106\0\66\20\3\0\1\20\22\0\1\20\7\0\12\20\17\0\20\20"+
    "\4\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20\1\0\1\20"+
    "\3\0\4\20\3\0\1\20\20\0\1\20\15\0\2\20\1\0\3\20"+
    "\16\0\2\20\23\0\6\20\4\0\2\20\2\0\26\20\1\0\7\20"+
    "\1\0\2\20\1\0\2\20\1\0\2\20\37\0\4\20\1\0\1\20"+
    "\23\0\3\20\20\0\11\20\1\0\3\20\1\0\26\20\1\0\7\20"+
    "\1\0\2\20\1\0\5\20\3\0\1\20\22\0\1\20\17\0\2\20"+
    "\27\0\1\20\13\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20"+
    "\1\0\2\20\1\0\5\20\3\0\1\20\36\0\2\20\1\0\3\20"+
    "\17\0\1\20\21\0\1\20\1\0\6\20\3\0\3\20\1\0\4\20"+
    "\3\0\2\20\1\0\1\20\1\0\2\20\3\0\2\20\3\0\3\20"+
    "\3\0\14\20\26\0\1\20\64\0\10\20\1\0\3\20\1\0\27\20"+
    "\1\0\20\20\3\0\1\20\32\0\3\20\5\0\2\20\36\0\1\20"+
    "\4\0\10\20\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20"+
    "\3\0\1\20\40\0\1\20\1\0\2\20\17\0\2\20\22\0\10\20"+
    "\1\0\3\20\1\0\51\20\2\0\1\20\20\0\1\20\5\0\3\20"+
    "\10\0\3\20\30\0\6\20\5\0\22\20\3\0\30\20\1\0\11\20"+
    "\1\0\1\20\2\0\7\20\72\0\60\20\1\0\2\20\14\0\7\20"+
    "\72\0\2\20\1\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20"+
    "\6\0\4\20\1\0\7\20\1\0\3\20\1\0\1\20\1\0\1\20"+
    "\2\0\2\20\1\0\4\20\1\0\2\20\11\0\1\20\2\0\5\20"+
    "\1\0\1\20\25\0\4\20\40\0\1\20\77\0\10\20\1\0\44\20"+
    "\33\0\5\20\163\0\53\20\24\0\1\20\20\0\6\20\4\0\4\20"+
    "\3\0\1\20\3\0\2\20\7\0\3\20\4\0\15\20\14\0\1\20"+
    "\21\0\46\20\1\0\1\20\5\0\1\20\2\0\53\20\1\0\u014d\20"+
    "\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20\2\0\51\20"+
    "\1\0\4\20\2\0\41\20\1\0\4\20\2\0\7\20\1\0\1\20"+
    "\1\0\4\20\2\0\17\20\1\0\71\20\1\0\4\20\2\0\103\20"+
    "\45\0\20\20\20\0\126\20\2\0\6\20\3\0\u026c\20\2\0\21\20"+
    "\1\0\32\20\5\0\113\20\6\0\10\20\7\0\15\20\1\0\4\20"+
    "\16\0\22\20\16\0\22\20\16\0\15\20\1\0\3\20\17\0\64\20"+
    "\43\0\1\20\4\0\1\20\103\0\130\20\10\0\5\20\2\0\42\20"+
    "\1\0\1\20\5\0\106\20\12\0\37\20\61\0\36\20\2\0\5\20"+
    "\13\0\54\20\4\0\32\20\66\0\27\20\11\0\65\20\122\0\1\20"+
    "\135\0\57\20\21\0\7\20\67\0\36\20\15\0\2\20\12\0\54\20"+
    "\32\0\44\20\51\0\3\20\12\0\44\20\2\0\11\20\140\0\4\20"+
    "\1\0\4\20\3\0\2\20\11\0\300\20\100\0\u0116\20\2\0\6\20"+
    "\2\0\46\20\2\0\6\20\2\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\37\20\2\0\65\20\1\0\7\20\1\0\1\20"+
    "\3\0\3\20\1\0\7\20\3\0\4\20\2\0\6\20\4\0\15\20"+
    "\5\0\3\20\1\0\7\20\53\0\1\40\1\40\107\0\1\20\15\0"+
    "\1\20\20\0\15\20\145\0\1\20\4\0\1\20\2\0\12\20\1\0"+
    "\1\20\3\0\5\20\6\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\4\20\1\0\13\20\2\0\4\20\5\0\5\20\4\0\1\20\64\0"+
    "\2\20\u0a7b\0\57\20\1\0\57\20\1\0\205\20\6\0\4\20\3\0"+
    "\2\20\14\0\46\20\1\0\1\20\5\0\1\20\2\0\70\20\7\0"+
    "\1\20\20\0\27\20\11\0\7\20\1\0\7\20\1\0\7\20\1\0"+
    "\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20\120\0"+
    "\1\20\u01d5\0\2\20\52\0\5\20\5\0\2\20\4\0\126\20\6\0"+
    "\3\20\1\0\132\20\1\0\4\20\5\0\51\20\3\0\136\20\21\0"+
    "\33\20\65\0\20\20\u0200\0\u19b6\20\112\0\u51d6\20\52\0\u048d\20\103\0"+
    "\56\20\2\0\u010d\20\3\0\20\20\12\0\2\20\24\0\57\20\20\0"+
    "\37\20\2\0\106\20\61\0\11\20\2\0\147\20\2\0\44\20\1\0"+
    "\10\20\77\0\13\20\1\0\3\20\1\0\4\20\1\0\27\20\35\0"+
    "\64\20\16\0\62\20\76\0\6\20\3\0\1\20\1\0\1\20\14\0"+
    "\34\20\12\0\27\20\31\0\35\20\7\0\57\20\34\0\1\20\20\0"+
    "\5\20\1\0\12\20\12\0\5\20\1\0\51\20\27\0\3\20\1\0"+
    "\10\20\24\0\27\20\3\0\1\20\3\0\62\20\1\0\1\20\3\0"+
    "\2\20\2\0\5\20\2\0\1\20\1\0\1\20\30\0\3\20\2\0"+
    "\13\20\7\0\3\20\14\0\6\20\2\0\6\20\2\0\6\20\11\0"+
    "\7\20\1\0\7\20\1\0\53\20\1\0\12\20\12\0\163\20\35\0"+
    "\u2ba4\20\14\0\27\20\4\0\61\20\u2104\0\u016e\20\2\0\152\20\46\0"+
    "\7\20\14\0\5\20\5\0\1\20\1\0\12\20\1\0\15\20\1\0"+
    "\5\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0\154\20\41\0"+
    "\u016b\20\22\0\100\20\2\0\66\20\50\0\14\20\164\0\5\20\1\0"+
    "\207\20\44\0\32\20\6\0\32\20\13\0\131\20\3\0\6\20\2\0"+
    "\6\20\2\0\6\20\2\0\3\20\43\0\14\20\1\0\32\20\1\0"+
    "\23\20\1\0\2\20\1\0\17\20\2\0\16\20\42\0\173\20\u0185\0"+
    "\35\20\3\0\61\20\57\0\40\20\20\0\21\20\1\0\10\20\6\0"+
    "\46\20\12\0\36\20\2\0\44\20\4\0\10\20\60\0\236\20\22\0"+
    "\44\20\4\0\44\20\4\0\50\20\10\0\64\20\234\0\u0137\20\11\0"+
    "\26\20\12\0\10\20\230\0\6\20\2\0\1\20\1\0\54\20\1\0"+
    "\2\20\3\0\1\20\2\0\27\20\12\0\27\20\11\0\37\20\101\0"+
    "\23\20\1\0\2\20\12\0\26\20\12\0\32\20\106\0\70\20\6\0"+
    "\2\20\100\0\1\20\17\0\4\20\1\0\3\20\1\0\33\20\54\0"+
    "\35\20\3\0\35\20\43\0\10\20\1\0\34\20\33\0\66\20\12\0"+
    "\26\20\12\0\23\20\15\0\22\20\156\0\111\20\67\0\63\20\15\0"+
    "\63\20\u0310\0\65\20\113\0\55\20\40\0\31\20\32\0\44\20\51\0"+
    "\43\20\3\0\1\20\14\0\60\20\16\0\4\20\25\0\1\20\1\0"+
    "\1\20\43\0\22\20\1\0\31\20\124\0\7\20\1\0\1\20\1\0"+
    "\4\20\1\0\17\20\1\0\12\20\7\0\57\20\46\0\10\20\2\0"+
    "\2\20\2\0\26\20\1\0\7\20\1\0\2\20\1\0\5\20\3\0"+
    "\1\20\22\0\1\20\14\0\5\20\236\0\65\20\22\0\4\20\65\0"+
    "\60\20\24\0\2\20\1\0\1\20\270\0\57\20\51\0\4\20\44\0"+
    "\60\20\24\0\1\20\73\0\53\20\125\0\32\20\u0186\0\100\20\37\0"+
    "\1\20\u01c0\0\71\20\u0107\0\11\20\1\0\45\20\21\0\1\20\61\0"+
    "\36\20\u0370\0\u039a\20\346\0\304\20\u0abc\0\u042f\20\u0fd1\0\u0247\20\u21b9\0"+
    "\u0239\20\7\0\37\20\161\0\36\20\22\0\60\20\20\0\4\20\37\0"+
    "\25\20\5\0\23\20\u0370\0\105\20\13\0\1\20\102\0\15\20\100\0"+
    "\1\20\37\0\u17ed\20\23\0\u02f3\20\u250d\0\2\20\u0bfe\0\153\20\5\0"+
    "\15\20\3\0\11\20\7\0\12\20\u1766\0\125\20\1\0\107\20\1\0"+
    "\2\20\2\0\1\20\2\0\2\20\2\0\4\20\1\0\14\20\1\0"+
    "\1\20\1\0\7\20\1\0\101\20\1\0\4\20\2\0\10\20\1\0"+
    "\7\20\1\0\34\20\1\0\4\20\1\0\5\20\1\0\1\20\3\0"+
    "\7\20\1\0\u0154\20\2\0\31\20\1\0\31\20\1\0\37\20\1\0"+
    "\31\20\1\0\37\20\1\0\31\20\1\0\37\20\1\0\31\20\1\0"+
    "\37\20\1\0\31\20\1\0\10\20\u1034\0\305\20\73\0\104\20\u04bc\0"+
    "\4\20\1\0\33\20\1\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\12\20\1\0\4\20\1\0\1\20\1\0\1\20\6\0\1\20\4\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\3\20\1\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\2\0\4\20\1\0\7\20\1\0"+
    "\4\20\1\0\4\20\1\0\1\20\1\0\12\20\1\0\21\20\5\0"+
    "\3\20\1\0\5\20\1\0\21\20\u1144\0\ua6d7\20\51\0\u1035\20\13\0"+
    "\336\20\2\0\u1682\20\u295e\0\u021e\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";
=======
    "\11\0\1\44\1\40\1\42\1\43\1\41\22\0\1\44\1\25\1\5"+
    "\2\0\1\22\1\24\1\14\2\17\1\22\1\4\1\17\1\4\1\2"+
    "\1\22\4\15\4\16\2\1\1\22\1\37\1\22\1\23\2\22\1\0"+
    "\4\20\1\3\25\20\1\0\1\6\1\0\1\22\1\20\1\0\1\31"+
    "\1\7\2\20\1\30\1\12\1\20\1\36\1\33\2\20\1\27\1\20"+
    "\1\11\3\20\1\13\1\32\1\10\1\26\1\34\1\35\3\20\1\17"+
    "\1\21\1\17\1\22\6\0\1\42\44\0\1\20\12\0\1\20\4\0"+
    "\1\20\5\0\27\20\1\0\37\20\1\0\u01ca\20\4\0\14\20\16\0"+
    "\5\20\7\0\1\20\1\0\1\20\201\0\5\20\1\0\2\20\2\0"+
    "\4\20\1\0\1\20\6\0\1\20\1\0\3\20\1\0\1\20\1\0"+
    "\24\20\1\0\123\20\1\0\213\20\10\0\246\20\1\0\46\20\2\0"+
    "\1\20\7\0\47\20\110\0\33\20\5\0\3\20\55\0\53\20\43\0"+
    "\2\20\1\0\143\20\1\0\1\20\17\0\2\20\7\0\2\20\12\0"+
    "\3\20\2\0\1\20\20\0\1\20\1\0\36\20\35\0\131\20\13\0"+
    "\1\20\30\0\41\20\11\0\2\20\4\0\1\20\5\0\26\20\4\0"+
    "\1\20\11\0\1\20\3\0\1\20\27\0\31\20\107\0\25\20\1\0"+
    "\10\20\106\0\66\20\3\0\1\20\22\0\1\20\7\0\12\20\17\0"+
    "\20\20\4\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20\1\0"+
    "\1\20\3\0\4\20\3\0\1\20\20\0\1\20\15\0\2\20\1\0"+
    "\3\20\16\0\2\20\23\0\6\20\4\0\2\20\2\0\26\20\1\0"+
    "\7\20\1\0\2\20\1\0\2\20\1\0\2\20\37\0\4\20\1\0"+
    "\1\20\23\0\3\20\20\0\11\20\1\0\3\20\1\0\26\20\1\0"+
    "\7\20\1\0\2\20\1\0\5\20\3\0\1\20\22\0\1\20\17\0"+
    "\2\20\27\0\1\20\13\0\10\20\2\0\2\20\2\0\26\20\1\0"+
    "\7\20\1\0\2\20\1\0\5\20\3\0\1\20\36\0\2\20\1\0"+
    "\3\20\17\0\1\20\21\0\1\20\1\0\6\20\3\0\3\20\1\0"+
    "\4\20\3\0\2\20\1\0\1\20\1\0\2\20\3\0\2\20\3\0"+
    "\3\20\3\0\14\20\26\0\1\20\64\0\10\20\1\0\3\20\1\0"+
    "\27\20\1\0\20\20\3\0\1\20\32\0\3\20\5\0\2\20\36\0"+
    "\1\20\4\0\10\20\1\0\3\20\1\0\27\20\1\0\12\20\1\0"+
    "\5\20\3\0\1\20\40\0\1\20\1\0\2\20\17\0\2\20\22\0"+
    "\10\20\1\0\3\20\1\0\51\20\2\0\1\20\20\0\1\20\5\0"+
    "\3\20\10\0\3\20\30\0\6\20\5\0\22\20\3\0\30\20\1\0"+
    "\11\20\1\0\1\20\2\0\7\20\72\0\60\20\1\0\2\20\14\0"+
    "\7\20\72\0\2\20\1\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\6\0\4\20\1\0\7\20\1\0\3\20\1\0\1\20\1\0"+
    "\1\20\2\0\2\20\1\0\4\20\1\0\2\20\11\0\1\20\2\0"+
    "\5\20\1\0\1\20\25\0\4\20\40\0\1\20\77\0\10\20\1\0"+
    "\44\20\33\0\5\20\163\0\53\20\24\0\1\20\20\0\6\20\4\0"+
    "\4\20\3\0\1\20\3\0\2\20\7\0\3\20\4\0\15\20\14\0"+
    "\1\20\21\0\46\20\1\0\1\20\5\0\1\20\2\0\53\20\1\0"+
    "\u014d\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20\2\0"+
    "\51\20\1\0\4\20\2\0\41\20\1\0\4\20\2\0\7\20\1\0"+
    "\1\20\1\0\4\20\2\0\17\20\1\0\71\20\1\0\4\20\2\0"+
    "\103\20\45\0\20\20\20\0\126\20\2\0\6\20\3\0\u026c\20\2\0"+
    "\21\20\1\0\32\20\5\0\113\20\6\0\10\20\7\0\15\20\1\0"+
    "\4\20\16\0\22\20\16\0\22\20\16\0\15\20\1\0\3\20\17\0"+
    "\64\20\43\0\1\20\4\0\1\20\103\0\130\20\10\0\5\20\2\0"+
    "\42\20\1\0\1\20\5\0\106\20\12\0\37\20\61\0\36\20\2\0"+
    "\5\20\13\0\54\20\4\0\32\20\66\0\27\20\11\0\65\20\122\0"+
    "\1\20\135\0\57\20\21\0\7\20\67\0\36\20\15\0\2\20\12\0"+
    "\54\20\32\0\44\20\51\0\3\20\12\0\44\20\2\0\11\20\140\0"+
    "\4\20\1\0\4\20\3\0\2\20\11\0\300\20\100\0\u0116\20\2\0"+
    "\6\20\2\0\46\20\2\0\6\20\2\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\37\20\2\0\65\20\1\0\7\20\1\0"+
    "\1\20\3\0\3\20\1\0\7\20\3\0\4\20\2\0\6\20\4\0"+
    "\15\20\5\0\3\20\1\0\7\20\53\0\1\42\1\42\107\0\1\20"+
    "\15\0\1\20\20\0\15\20\145\0\1\20\4\0\1\20\2\0\12\20"+
    "\1\0\1\20\3\0\5\20\6\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\4\20\1\0\13\20\2\0\4\20\5\0\5\20\4\0\1\20"+
    "\64\0\2\20\u0a7b\0\57\20\1\0\57\20\1\0\205\20\6\0\4\20"+
    "\3\0\2\20\14\0\46\20\1\0\1\20\5\0\1\20\2\0\70\20"+
    "\7\0\1\20\20\0\27\20\11\0\7\20\1\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20"+
    "\120\0\1\20\u01d5\0\2\20\52\0\5\20\5\0\2\20\4\0\126\20"+
    "\6\0\3\20\1\0\132\20\1\0\4\20\5\0\51\20\3\0\136\20"+
    "\21\0\33\20\65\0\20\20\u0200\0\u19b6\20\112\0\u51d6\20\52\0\u048d\20"+
    "\103\0\56\20\2\0\u010d\20\3\0\20\20\12\0\2\20\24\0\57\20"+
    "\20\0\37\20\2\0\106\20\61\0\11\20\2\0\147\20\2\0\44\20"+
    "\1\0\10\20\77\0\13\20\1\0\3\20\1\0\4\20\1\0\27\20"+
    "\35\0\64\20\16\0\62\20\76\0\6\20\3\0\1\20\1\0\1\20"+
    "\14\0\34\20\12\0\27\20\31\0\35\20\7\0\57\20\34\0\1\20"+
    "\20\0\5\20\1\0\12\20\12\0\5\20\1\0\51\20\27\0\3\20"+
    "\1\0\10\20\24\0\27\20\3\0\1\20\3\0\62\20\1\0\1\20"+
    "\3\0\2\20\2\0\5\20\2\0\1\20\1\0\1\20\30\0\3\20"+
    "\2\0\13\20\7\0\3\20\14\0\6\20\2\0\6\20\2\0\6\20"+
    "\11\0\7\20\1\0\7\20\1\0\53\20\1\0\12\20\12\0\163\20"+
    "\35\0\u2ba4\20\14\0\27\20\4\0\61\20\u2104\0\u016e\20\2\0\152\20"+
    "\46\0\7\20\14\0\5\20\5\0\1\20\1\0\12\20\1\0\15\20"+
    "\1\0\5\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0\154\20"+
    "\41\0\u016b\20\22\0\100\20\2\0\66\20\50\0\14\20\164\0\5\20"+
    "\1\0\207\20\44\0\32\20\6\0\32\20\13\0\131\20\3\0\6\20"+
    "\2\0\6\20\2\0\6\20\2\0\3\20\43\0\14\20\1\0\32\20"+
    "\1\0\23\20\1\0\2\20\1\0\17\20\2\0\16\20\42\0\173\20"+
    "\u0185\0\35\20\3\0\61\20\57\0\40\20\20\0\21\20\1\0\10\20"+
    "\6\0\46\20\12\0\36\20\2\0\44\20\4\0\10\20\60\0\236\20"+
    "\22\0\44\20\4\0\44\20\4\0\50\20\10\0\64\20\234\0\u0137\20"+
    "\11\0\26\20\12\0\10\20\230\0\6\20\2\0\1\20\1\0\54\20"+
    "\1\0\2\20\3\0\1\20\2\0\27\20\12\0\27\20\11\0\37\20"+
    "\101\0\23\20\1\0\2\20\12\0\26\20\12\0\32\20\106\0\70\20"+
    "\6\0\2\20\100\0\1\20\17\0\4\20\1\0\3\20\1\0\33\20"+
    "\54\0\35\20\3\0\35\20\43\0\10\20\1\0\34\20\33\0\66\20"+
    "\12\0\26\20\12\0\23\20\15\0\22\20\156\0\111\20\67\0\63\20"+
    "\15\0\63\20\u0310\0\65\20\113\0\55\20\40\0\31\20\32\0\44\20"+
    "\51\0\43\20\3\0\1\20\14\0\60\20\16\0\4\20\25\0\1\20"+
    "\1\0\1\20\43\0\22\20\1\0\31\20\124\0\7\20\1\0\1\20"+
    "\1\0\4\20\1\0\17\20\1\0\12\20\7\0\57\20\46\0\10\20"+
    "\2\0\2\20\2\0\26\20\1\0\7\20\1\0\2\20\1\0\5\20"+
    "\3\0\1\20\22\0\1\20\14\0\5\20\236\0\65\20\22\0\4\20"+
    "\65\0\60\20\24\0\2\20\1\0\1\20\270\0\57\20\51\0\4\20"+
    "\44\0\60\20\24\0\1\20\73\0\53\20\125\0\32\20\u0186\0\100\20"+
    "\37\0\1\20\u01c0\0\71\20\u0107\0\11\20\1\0\45\20\21\0\1\20"+
    "\61\0\36\20\u0370\0\u039a\20\346\0\304\20\u0abc\0\u042f\20\u0fd1\0\u0247\20"+
    "\u21b9\0\u0239\20\7\0\37\20\161\0\36\20\22\0\60\20\20\0\4\20"+
    "\37\0\25\20\5\0\23\20\u0370\0\105\20\13\0\1\20\102\0\15\20"+
    "\100\0\1\20\37\0\u17ed\20\23\0\u02f3\20\u250d\0\2\20\u0bfe\0\153\20"+
    "\5\0\15\20\3\0\11\20\7\0\12\20\u1766\0\125\20\1\0\107\20"+
    "\1\0\2\20\2\0\1\20\2\0\2\20\2\0\4\20\1\0\14\20"+
    "\1\0\1\20\1\0\7\20\1\0\101\20\1\0\4\20\2\0\10\20"+
    "\1\0\7\20\1\0\34\20\1\0\4\20\1\0\5\20\1\0\1\20"+
    "\3\0\7\20\1\0\u0154\20\2\0\31\20\1\0\31\20\1\0\37\20"+
    "\1\0\31\20\1\0\37\20\1\0\31\20\1\0\37\20\1\0\31\20"+
    "\1\0\37\20\1\0\31\20\1\0\10\20\u1034\0\305\20\73\0\104\20"+
    "\u04bc\0\4\20\1\0\33\20\1\0\2\20\1\0\1\20\2\0\1\20"+
    "\1\0\12\20\1\0\4\20\1\0\1\20\1\0\1\20\6\0\1\20"+
    "\4\0\1\20\1\0\1\20\1\0\1\20\1\0\3\20\1\0\2\20"+
    "\1\0\1\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\2\0\4\20\1\0\7\20"+
    "\1\0\4\20\1\0\4\20\1\0\1\20\1\0\12\20\1\0\21\20"+
    "\5\0\3\20\1\0\5\20\1\0\21\20\u1144\0\ua6d7\20\51\0\u1035\20"+
    "\13\0\336\20\2\0\u1682\20\u295e\0\u021e\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";
>>>>>>> master

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
<<<<<<< HEAD
    "\1\0\1\1\1\2\1\3\1\4\1\1\4\3\1\5"+
    "\1\6\1\5\1\6\4\3\1\6\1\7\2\0\1\2"+
    "\1\0\4\3\2\0\1\3\1\10\2\3\1\0\1\2"+
    "\4\3\2\0\1\3\1\11\1\3\2\0\1\2\1\3"+
    "\1\12\2\3\2\13\1\2\1\0\1\3\1\14\1\15"+
    "\1\16\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[61];
=======
    "\1\0\1\1\1\2\1\3\1\4\1\1\4\3\1\1"+
    "\1\5\1\4\1\5\1\4\1\6\4\3\1\5\1\7"+
    "\2\0\1\2\1\0\4\3\2\0\1\10\1\11\1\3"+
    "\1\12\2\3\1\0\1\2\4\3\2\0\1\3\1\13"+
    "\1\3\2\0\1\2\1\3\1\14\2\3\2\15\1\2"+
    "\1\0\1\3\1\16\1\17\1\20\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[65];
>>>>>>> master
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
<<<<<<< HEAD
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\43\0\214\0\214\0\u0181\0\u01a4"+
    "\0\u01c7\0\u01ea\0\u020d\0\43\0\u0230\0\257\0\43\0\u0253"+
    "\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302\0\u0325\0\u0348\0\151"+
    "\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u043d\0\u0460"+
    "\0\u0483\0\u04a6\0\u04c9\0\151\0\u04ec\0\u050f\0\u0532\0\151"+
    "\0\u0555\0\151\0\u0578\0\u059b\0\43\0\u05be\0\u05e1\0\u05e1"+
    "\0\u0604\0\151\0\151\0\43\0\151";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[61];
=======
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\u0172\0\45\0\u0197\0\224\0\u01bc\0\224"+
    "\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275\0\45\0\u029a\0\271"+
    "\0\45\0\u02bf\0\u02e4\0\u0309\0\u032e\0\u0353\0\u0378\0\u039d"+
    "\0\224\0\224\0\u03c2\0\157\0\u03e7\0\u040c\0\u0431\0\u0456"+
    "\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\157"+
    "\0\u057e\0\u05a3\0\u05c8\0\157\0\u05ed\0\157\0\u0612\0\u0637"+
    "\0\45\0\u065c\0\u0681\0\u0681\0\u06a6\0\157\0\157\0\45"+
    "\0\157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[65];
>>>>>>> master
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\2\1\4"+
    "\1\7\1\10\1\11\1\12\1\13\2\3\1\14\1\4"+
<<<<<<< HEAD
    "\1\15\1\5\1\16\2\4\1\17\2\4\1\20\1\21"+
    "\1\22\1\4\1\23\2\24\1\0\2\24\44\0\1\3"+
    "\1\25\1\4\3\0\5\4\1\0\2\3\1\0\1\4"+
    "\3\0\11\4\7\0\1\4\1\0\1\4\3\0\5\4"+
    "\1\0\2\4\1\0\1\4\3\0\11\4\12\0\1\5"+
    "\14\0\3\5\17\0\5\26\1\27\1\30\34\26\1\0"+
    "\1\4\1\0\1\4\3\0\4\4\1\31\1\0\2\4"+
    "\1\0\1\4\3\0\11\4\7\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\0\2\4\1\0\1\4\3\0\1\32"+
    "\10\4\7\0\1\4\1\0\1\4\3\0\5\4\1\0"+
    "\2\4\1\0\1\4\3\0\3\4\1\33\5\4\7\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\1\0"+
    "\1\4\3\0\2\4\1\34\6\4\6\0\6\35\1\36"+
    "\5\35\1\0\26\35\1\0\1\4\1\0\1\4\3\0"+
    "\5\4\1\0\2\4\1\0\1\4\3\0\1\4\1\37"+
    "\7\4\7\0\1\4\1\0\1\4\3\0\3\4\1\40"+
    "\1\4\1\0\2\4\1\0\1\4\3\0\11\4\7\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\1\0"+
    "\1\4\3\0\3\4\1\41\5\4\7\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\0\2\4\1\0\1\4\3\0"+
    "\10\4\1\42\43\0\1\43\6\0\1\44\13\0\2\44"+
    "\31\0\12\26\25\0\1\4\1\0\1\4\3\0\5\4"+
    "\1\0\2\4\1\0\1\4\3\0\1\45\10\4\7\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\1\0"+
    "\1\4\3\0\1\4\1\46\7\4\7\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\0\2\4\1\0\1\4\3\0"+
    "\1\4\1\47\7\4\7\0\1\4\1\0\1\4\3\0"+
    "\1\4\1\50\3\4\1\0\2\4\1\0\1\4\3\0"+
    "\11\4\22\0\1\27\33\0\10\35\1\51\1\52\25\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\1\0"+
    "\1\4\3\0\4\4\1\53\4\4\7\0\1\4\1\0"+
    "\1\4\3\0\4\4\1\54\1\0\2\4\1\0\1\4"+
    "\3\0\11\4\7\0\1\4\1\0\1\4\3\0\5\4"+
    "\1\0\2\4\1\0\1\4\3\0\5\4\1\55\3\4"+
    "\43\0\1\56\6\0\1\44\1\0\1\57\11\0\2\44"+
    "\7\0\1\57\15\0\1\4\1\0\1\4\3\0\5\4"+
    "\1\0\2\4\1\0\1\4\3\0\2\4\1\60\6\4"+
    "\7\0\1\4\1\0\1\4\3\0\5\4\1\0\2\4"+
    "\1\0\1\4\3\0\1\4\1\60\7\4\7\0\1\4"+
    "\1\0\1\4\3\0\5\4\1\0\2\4\1\0\1\4"+
    "\3\0\4\4\1\45\4\4\7\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\0\2\4\1\0\1\4\3\0\1\61"+
    "\10\4\22\0\1\27\2\52\40\0\1\27\2\35\25\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\1\0"+
    "\1\4\3\0\2\4\1\62\2\4\1\63\3\4\7\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\1\0"+
    "\1\4\3\0\1\4\1\64\7\4\6\0\36\56\1\65"+
    "\1\66\2\65\1\56\1\0\1\67\2\0\1\70\10\0"+
    "\2\67\25\0\1\4\1\0\1\4\3\0\4\4\1\71"+
    "\1\0\2\4\1\0\1\4\3\0\11\4\7\0\1\4"+
    "\1\0\1\4\3\0\3\4\1\72\1\4\1\0\2\4"+
    "\1\0\1\4\3\0\11\4\7\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\0\2\4\1\0\1\4\3\0\2\4"+
    "\1\73\6\4\44\0\1\74\5\0\1\67\13\0\2\67"+
    "\25\0\1\4\1\0\1\4\3\0\2\4\1\75\2\4"+
    "\1\0\2\4\1\0\1\4\3\0\11\4\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1575];
=======
    "\1\15\1\5\1\16\1\17\1\20\2\4\1\21\2\4"+
    "\1\22\1\23\1\24\1\4\1\25\2\26\1\0\2\26"+
    "\46\0\1\3\1\27\1\4\3\0\5\4\1\0\2\3"+
    "\1\0\1\4\5\0\11\4\7\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\0\2\4\1\0\1\4\5\0\11\4"+
    "\12\0\1\5\14\0\5\5\17\0\5\30\1\31\1\32"+
    "\36\30\1\0\1\4\1\0\1\4\3\0\4\4\1\33"+
    "\1\0\2\4\1\0\1\4\5\0\11\4\7\0\1\4"+
    "\1\0\1\4\3\0\5\4\1\0\2\4\1\0\1\4"+
    "\5\0\1\34\10\4\7\0\1\4\1\0\1\4\3\0"+
    "\5\4\1\0\2\4\1\0\1\4\5\0\3\4\1\35"+
    "\5\4\7\0\1\4\1\0\1\4\3\0\5\4\1\0"+
    "\2\4\1\0\1\4\5\0\2\4\1\36\6\4\6\0"+
    "\6\37\1\40\5\37\1\0\30\37\4\0\1\5\14\0"+
    "\1\41\4\5\23\0\1\5\14\0\3\5\1\42\1\5"+
    "\20\0\1\4\1\0\1\4\3\0\5\4\1\0\2\4"+
    "\1\0\1\4\5\0\1\4\1\43\7\4\7\0\1\4"+
    "\1\0\1\4\3\0\3\4\1\44\1\4\1\0\2\4"+
    "\1\0\1\4\5\0\11\4\7\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\0\2\4\1\0\1\4\5\0\3\4"+
    "\1\45\5\4\7\0\1\4\1\0\1\4\3\0\5\4"+
    "\1\0\2\4\1\0\1\4\5\0\10\4\1\46\45\0"+
    "\1\47\6\0\1\50\13\0\2\50\33\0\12\30\27\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\1\0"+
    "\1\4\5\0\1\51\10\4\7\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\0\2\4\1\0\1\4\5\0\1\4"+
    "\1\52\7\4\7\0\1\4\1\0\1\4\3\0\5\4"+
    "\1\0\2\4\1\0\1\4\5\0\1\4\1\53\7\4"+
    "\7\0\1\4\1\0\1\4\3\0\1\4\1\54\3\4"+
    "\1\0\2\4\1\0\1\4\5\0\11\4\22\0\1\31"+
    "\35\0\10\37\1\55\1\56\27\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\0\2\4\1\0\1\4\5\0\4\4"+
    "\1\57\4\4\7\0\1\4\1\0\1\4\3\0\4\4"+
    "\1\60\1\0\2\4\1\0\1\4\5\0\11\4\7\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\1\0"+
    "\1\4\5\0\5\4\1\61\3\4\45\0\1\62\6\0"+
    "\1\50\1\0\1\63\11\0\2\50\11\0\1\63\15\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\1\0"+
    "\1\4\5\0\2\4\1\64\6\4\7\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\0\2\4\1\0\1\4\5\0"+
    "\1\4\1\64\7\4\7\0\1\4\1\0\1\4\3\0"+
    "\5\4\1\0\2\4\1\0\1\4\5\0\4\4\1\51"+
    "\4\4\7\0\1\4\1\0\1\4\3\0\5\4\1\0"+
    "\2\4\1\0\1\4\5\0\1\65\10\4\22\0\1\31"+
    "\2\56\42\0\1\31\2\37\27\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\0\2\4\1\0\1\4\5\0\2\4"+
    "\1\66\2\4\1\67\3\4\7\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\0\2\4\1\0\1\4\5\0\1\4"+
    "\1\70\7\4\6\0\40\62\1\71\1\72\2\71\1\62"+
    "\1\0\1\73\2\0\1\74\10\0\2\73\27\0\1\4"+
    "\1\0\1\4\3\0\4\4\1\75\1\0\2\4\1\0"+
    "\1\4\5\0\11\4\7\0\1\4\1\0\1\4\3\0"+
    "\3\4\1\76\1\4\1\0\2\4\1\0\1\4\5\0"+
    "\11\4\7\0\1\4\1\0\1\4\3\0\5\4\1\0"+
    "\2\4\1\0\1\4\5\0\2\4\1\77\6\4\46\0"+
    "\1\100\5\0\1\73\13\0\2\73\27\0\1\4\1\0"+
    "\1\4\3\0\2\4\1\101\2\4\1\0\2\4\1\0"+
    "\1\4\5\0\11\4\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1739];
>>>>>>> master
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
<<<<<<< HEAD
    "\1\0\1\11\11\1\1\11\7\1\1\11\2\0\1\11"+
    "\1\0\4\1\2\0\4\1\1\0\5\1\2\0\3\1"+
    "\2\0\5\1\1\11\2\1\1\0\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[61];
=======
    "\1\0\1\11\11\1\1\11\11\1\1\11\2\0\1\11"+
    "\1\0\4\1\2\0\6\1\1\0\5\1\2\0\3\1"+
    "\2\0\5\1\1\11\2\1\1\0\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[65];
>>>>>>> master
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

// This part becomes a verbatim part of the program text inside
// the class, NanoLexer.java, that is generated.

// Definitions of tokens:
final static int ERROR = -1;
final static int IF = 1001;
final static int DEFINE = 1002;
final static int NAME = 1003;
final static int LITERAL = 1004;
final static int OPNAME = 1005;
final static int ELSIF = 1006;
final static int ELSE = 1007;
final static int VAR = 1008;
final static int WHILE = 1009;
final static int RETURN = 1010;

final static int AND = 1011;
final static int OR = 1012;
final static int NOT = 1013;

final static int OP1 = 1101; 
final static int OP2 = 1102;
final static int OP3 = 1103;
final static int OP4 = 1104;
final static int OP5 = 1105;
final static int OP6 = 1106;
final static int OP7 = 1107;

// A variable that will contain lexemes as they are recognized:
private static String lexeme;
private static int t1, t2 = 0;              // t1 = current token, t2 = next token
private static String l1, l2 = "";
private static int line1, line2 = 0;
private static int column1, column2 =0;


// This runs the scanner:
public static void main(String[] args) throws Exception
{
        NanoLexer lexer = new NanoLexer(new FileReader(args[0]));
        lexer.init();
}


public void init() throws Exception
{
        
        t1 = yylex();
        l1 = l2;
        t2 = yylex();
        

}     
  

public void advance() throws Exception
{
        System.out.println("advancing from token: " + t1 + " (" + l1 + ") to " + t2 + " (" + l2 + ")");
        t1 = t2;
        l1 = l2; //
        t2 = yylex();
        line1 = line2;
        line2 = yyline;
        column1 = column2;
        column2 = yycolumn;
        if (t2 == 0) {
                l1 = l2;
                l2 = yytext();    
        }
       

}

public int getToken()
{
        return t1;
}

public int getNextToken()
{
        return t2;
}

public String getLexeme()
{
        return l1;
}

public String getNextLexeme()
{
        return l2;
}

public int getLine()
{
        return line1;
}

public int getColumn()
{
        return column1;
}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public NanoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2440) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { l2 = yytext();
	return ERROR;
            } 
            // fall through
          case 16: break;
          case 2: 
            { l2 = yytext();
	return LITERAL;
            } 
            // fall through
          case 17: break;
          case 3: 
            { l2 = yytext();
	return NAME;
            } 
            // fall through
          case 18: break;
          case 4: 
            { l2 = yytext();
        int token = -1;
        switch(l2.charAt(0))
{
                case '*': case '/': case '%':
                    token = 1107;
                    break;
                case '+': case '-':
                     token = 1106;
                     break;
                case '<': case '>': case '!': case '=':
                     token = 1105;
                     break;
                case '&':
                     token = 1104;
                     break;
                case '|':
                     token = 1103;
                     break;
                case ':':
                     token = 1102;
                     break;
                case '?': case '~': case '^':
                     token = 1101;
                     break;
        }
        return token;
            } 
            // fall through
          case 19: break;
          case 5: 
            { l2 = yytext();
        int tok = ERROR;
        switch(l2)
        {
            case "&&":
                tok = AND;
                break;
            case "||":
                tok = OR;
                break;
            case "!":
                tok = NOT;
                break;
        }
        return tok;
            } 
            // fall through
          case 20: break;
          case 6: 
            { l2 = yytext();
	return yycharat(0);
            } 
            // fall through
          case 21: break;
          case 7: 
            { 
            } 
            // fall through
          case 22: break;
          case 8: 
            { l2 = yytext();
	return IF;
            } 
            // fall through
          case 23: break;
          case 9: 
            { l2 = yytext();
	return VAR;
            } 
            // fall through
          case 24: break;
          case 10: 
            { l2 = yytext();
        return ELSE;
            } 
            // fall through
          case 25: break;
          case 11: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { 
            } 
            // fall through
          case 26: break;
          case 12: 
            { l2 = yytext();
        return ELSIF;
            } 
            // fall through
          case 27: break;
          case 13: 
            { l2 = yytext();
        return WHILE;
            } 
            // fall through
          case 28: break;
          case 14: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { 
            } 
            // fall through
          case 29: break;
          case 15: 
            { l2 = yytext();
        return RETURN;
            } 
            // fall through
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
