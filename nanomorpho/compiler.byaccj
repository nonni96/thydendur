%{
        import java.io.*;
        import java.util.*;

%}

%token <sval> LITERAL,NAME,OP1,OP2,OP3,OP4,OP5,OP6,OP7,VAR,AND,OR,NOT,WHILE,IF,ELSIF,ELSE
%type <obj> program, function, funbody, expr, funargs, nonemptyargs, ifexpr, elsepart, body, expressions
%type <ival> names, nonemptynames, decl
%type <sval> op
%right '=' RETURN
%left AND
%left OR
%left NOT
%left OP1
%right OP2
%left OP3
%left OP4
%left OP5
%left OP6
%left OP7
%left UNOP


%%

start
        : program       { generateProgram(name, ((Vector<Object>)($1)).toArray()); }

program
        :       function
                {
                        $$=new Vector<Object>();
                        ((Vector<Object>)($$)).add($1);
                }
        |       program function
                {
                        ((Vector<Object>)($1)).add($2);
                        $$ = $1;
                }
        ;
        
function
        :       {
                        varCount = 0;
                        varTable = new HashMap<String, Integer>();
                }
                NAME '(' names ')' '{' decl funbody '}'
                {    // XXX check numbers
                        $$=new Object[]{ $2, $4, $7, ((Vector<Object>)($8)).toArray() };
                }
        ;

names
        :                       { $$ = 0; }
        |       nonemptynames   { $$ = $1; }
        ;

nonemptynames
        :       nonemptynames ',' NAME  { addVar($3); $$ = $1 + 1; }
        |       NAME            { addVar($1); $$ = 1; }
        ;

decl    :       VAR names ';'           { $$ = $2; }
        |       decl VAR names ';'      { $$ = $1 + $3; }
        ;

// TODO empty decl
/*
decl    :                       { $$=0; }
        |       nonemptyvars    { $$=$1; }
        ;

nonemptyvars
        :       VAR names ';'           { $$ = $2; }
        |       decl VAR names ';'      { $$ = $1 + $3; }
        ;
*/

funbody
        :       expr ';'
                {
                        $$=new Vector<Object>();
                        ((Vector<Object>)($$)).add($1);
                }
        |       funbody expr ';'
                {
                        ((Vector<Object>)($1)).add($2);
                        $$ = $1;
                }
        ;
        
expr
        :       NAME                            { $$=new Object[] { "FETCH", findVar($1) }; }
        |       NAME '=' expr                   { $$=new Object[] { "STORE", findVar($1), $3 }; }
        |       NAME '(' funargs ')'            { $$=new Object[] { "CALL", $1, ((Vector<Object>)($3)).toArray() }; }
        |       expr OP1 expr                   { $$=new Object[] { "CALL", $2, $1, $2 }; }
        |       expr OP2 expr                   { $$=new Object[] { "CALL", $2, $1, $2 }; }
        |       expr OP3 expr   		{ $$=new Object[] { "CALL", $2, $1, $2 }; }
        |       expr OP4 expr   		{ $$=new Object[] { "CALL", $2, $1, $2 }; } 
        |       expr OP5 expr   		{ $$=new Object[] { "CALL", $2, $1, $2 }; }
        |       expr OP6 expr   		{ $$=new Object[] { "CALL", $2, $1, $2 }; }
        |       expr OP7 expr   		{ $$=new Object[] { "CALL", $2, $1, $2 }; }
	|	op expr %prec UNOP              { $$=new Object[] { "CALL", $1, $2 }; }
        |       expr AND expr   		{ $$=new Object[] { "AND", $1, $2 }; }
        |       expr OR expr    		{ $$=new Object[] { "OR", $1, $2 };  } 
        |       NOT expr        		{ $$=new Object[] { "NOT", $1 };     } 
	|	'(' expr ')'                    { $$ = $2; }
        |       ifexpr                          { $$=$1; }
        |       WHILE '(' expr ')' body         { $$=new Object[] { "WHILE", $3, $5 }; }
	|	LITERAL                         { $$=new Object[] { "LITERAL", $1 }; }
        |       RETURN expr                     { $$=new Object[] { "RETURN", $2 }; }
	;

funargs
        :                       { $$=null; } // ??? consistent with code generator smallexpr?
        |       nonemptyargs    { $$=((Vector<Object>)($1)).toArray(); }
        ;

nonemptyargs
        :       expr
                {
                        $$=new Vector<Object>();
                        ((Vector<Object>)($$)).add($1);
                }
        |       nonemptyargs ',' expr
                {
                        ((Vector<Object>)($1)).add($3);
                        $$ = $1;
                }

ifexpr
        :       IF '(' expr ')' body elsepart
                {
                        $$=new Object[] { "IF", $3, $5, $6 };
                } 
        ;

elsepart
        :                                             { $$=null; }
        |       ELSIF '(' expr ')' body elsepart      { $$=new Object[] { "IF", $3, $5, $6 }; }
        |       ELSE body                             { $$=$2; }
        ;


body    :       '{' expressions '}' ; { $$=$2; }

expressions
        :       expr ';'
                {
                        $$=new Vector<Object>();
                        ((Vector<Object>)($$)).add($1);
                }
        |       expressions expr ';'
                {
                        ((Vector<Object>)($1)).add($2);
                        $$ = $1;
                }
        ;

op	:	OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7 ; { $$=$1; }

%%

	static private String name;
	private NanoMorphoLexer lexer;
        int last_token_read;

        private int yylex()
        {
            int yyl_return = -1;
            try
            {
                yyval = null;
                int last_token_read = yyl_return = lexer.yylex();
                if (yyval == null)
                   yyval = new NanoMorphoParserVal(NanoMorphoParser.yyname[yyl_return]);
            }
            catch (Exception e)
            {
                System.err.println("IO error: " + e);
            }
            return yyl_return;
        }

        private String err()
        {
            int line = lexer.getLine() + 1;
            int column = lexer.getColumn() + 1;
            String pos = "\nError in line " + line + ", column " + column;
            String e = ".\nNext lexeme is \'" + lexer.getLexeme() + "\'.";
            return pos + e;
        }

        public void yyerror(String error)
        {
            System.out.println(err());
            System.out.println("Error:  " + error);
            System.out.println("Token:  " + NanoMorphoParser.yyname[last_token_read]);
            
            System.exit(1);
        }

        public NanoMorphoParser(Reader r) throws Exception
        {
            lexer = new NanoMorphoLexer(r, this);
        }

        public static void main(String[] args) throws Exception
        {
            name = args[0].substring(0,args[0].indexOf('.'));
            try
            {
                NanoMorphoParser yyparser = new NanoMorphoParser(new FileReader(args[0]));
                yyparser.yyparse();
            }
            catch (Exception e)
            {
                System.err.println(e);
            }
        }
        
        // The symbol table consists of the following two variables.
        private static int varCount;
        private static HashMap<String,Integer> varTable;
        
        // Adds a new variable to the symbol table.
        // Throws Error if the variable already exists.
        private static void addVar( String name )
        {
            if( varTable.get(name) != null )
                throw new Error("Variable "+name+" already exists");
            varTable.put(name,varCount++);
        }
        
        // Finds the location of an existing variable.
        // Throws Error if the variable does not exist.
        private static int findVar( String name )
        {
            Integer res = varTable.get(name);
            if( res == null ) {
                throw new Error("Variable "+name+" does not exist");
            }
            return res;
        }
           
    	static void generateProgram( String programName, Object[] funs )
    	{
            // print intermediate code to file
            try
            {
            	FileWriter fw = new FileWriter(programName + ".intermd");
            	PrintWriter pw = new PrintWriter(fw);
            	printIntermediate(funs, 2, pw);
            }
            catch (Exception e)
            {
                System.out.println("Could not print intermediate code");
                System.err.println("Error:  " + e);
            }
    	    System.out.println("\""+programName+".mexe\" = main in");
    	    System.out.println("!");
    	    System.out.println("{{");
    	    for( Object f: funs )
    	    {
    	        generateFunction((Object[])f);
    	    }
    	    System.out.println("}}");
    	    System.out.println("*");
    	    System.out.println("BASIS;");
    	}

        // Print intermediate code to file.
    	public static void printIntermediate(Object[] tree, int indent, PrintWriter pw)
    	{
    	    for (Object obj : tree)
    	    {
    	        if (obj instanceof Object[])
    	        {
    	            Object[] o = (Object[]) obj;
    	            pw.printf("%-" + indent + "s%s","", "[\n");
    	            printIntermediate(o, indent+2, pw);
    	            pw.printf("%-" + indent + "s%s","", "]\n");
    	        }
    	        else
    	            pw.printf("%-" + indent + "s%s\n","", obj);
    	    }
    	}
    	
    	// function = [name,argcount,varcount,exprs]
    	static void generateFunction( Object[] fun )
    	{
    	    System.out.println("#\"" + fun[0] + "[f" + fun[1] + "]\" =");
    	    System.out.println("[");
    	    int varcount = (int) fun[2];
    	    if (varcount > 0)
    	    {
    	        instr("MakeVal", "null");
    	        for (int k=1; k<varcount; k++)
    	            instr("MakeValP", "null");
    	    }
    	    if (varcount == 1)
    	        emit("(Push)");
    	    if (fun[3] != null)
    	        generateExprR((Object[])fun[3]);
    	    System.out.println("];");
    	}
    	
    	// All existing labels, i.e. labels the generated
    	// code that we have already produced, should be
    	// of form
    	//    _xxxx
    	// where xxxx corresponds to an integer n
    	// such that 0 <= n < nextLab.
    	// So we should update nextLab as we generate
    	// new labels.
    	// The first generated label would be _0, the
    	// next would be _1, and so on.
    	private static int nextLab = 0;
    	
    	// Returns a new, previously unused, label.
    	// Useful for control-flow expressions.
    	static String newLabel()
    	{
    	    return "_"+(nextLab++);
    	}
    	
    	static void emit(String line)
    	{
    	        System.out.println(line);
    	}
    	
    	// Prints out "(instuction arg)".
    	static void instr(String instruction, String arg)
    	{
    	    System.out.println("(" + instruction + " " + arg + ")");
    	}
    	
    	static void generateExprR( Object[] e )
    	{
    	    if (e[0] instanceof Object[])
    	    {
    	        Object[] exprs = (Object[]) e;
    	        int i;
    	        for (i=0; i<exprs.length-1; i++)
    	            generateExpr((Object[]) exprs[i]);
    	        generateExprR((Object[]) exprs[i]);
    	        return;
    	    }
    	    String s = (String) e[0];
    	    switch(s)
    	    {
    	    case "RETURN" :
    	        // ["RETURN",expr]
    	        generateExprR((Object[]) e[1]);
    	        return;
    	    case "STORE" :
    	        generateExpr((Object[]) e[2]);
    	        System.out.println("(StoreR " + e[1] + ")");
    	        return;
    	    case "OR":
    	        // ["OR",expr,expr]
    	        generateExpr((Object[]) e[1]);
    	        String labTrue = newLabel();
    	        System.out.println("(GoTrue " + labTrue + ")");
    	        generateExpr((Object[]) e[2]);
    	        System.out.println(labTrue + ":");
    	        emit("(Return)");
    	        return;
    	    case "AND":
    	        // ["AND",expr,expr]
    	        generateExpr((Object[]) e[1]);
    	        String labFalse = newLabel();
    	        instr("GoFalse", labFalse);
    	        generateExpr((Object[]) e[2]);
    	        System.out.println(labFalse + ":");
    	        emit("(Return)");
    	        return;
    	    case "NOT":
    	        // ["NOT",expr]
    	        Object[] expr = (Object[]) e[1];
    	        String nextInst = (String) expr[0];
    	        if (nextInst.equals("NOT"))
    	        {
    	            generateExprR((Object []) expr[1]);
    	            return;
    	        }
    	        generateExpr(expr);
    	        System.out.println("(NOT)");
    	        emit("(Return)");
    	        return;
    	    case "CALL":
    	        // ["CALL",name,args]
    	        Object[] argsArr = (Object[]) e[2];
    	        int i;
    	        if (argsArr[0] instanceof String) {
    	            generateExpr(argsArr);
    	            System.out.println("(CallR #\"" + e[1] + "[f1]\" 1)");
    	            return;
    	        }
    	        for (i=0; i < argsArr.length; i++)
    	        {
    	            if (i == 0)
    	                generateExpr((Object[]) argsArr[i]);
    	            else
    	                generateExprP((Object[]) argsArr[i]);
    	        }
    	        System.out.println("(CallR #\"" + e[1] + "[f" + i + "]\" " + i + ")");
    	        return;
    	    case "FETCH":
    	        System.out.println("(FetchR " + (int)e[1] + ")");
    	        return;
    	    case "LITERAL":
    	        // ["LITERAL",string]
    	        instr("MakeValR", (String) e[1]);
    	        return;
    	    case "IF":
    	        // ["IF",cond,expr,elsepart]
    	        String labEnd = newLabel();
    	        generateIf((Object[]) e, labEnd);
    	        return;
    	    case "WHILE":
    	        // ["WHILE",cond,expr]
    	        String labCond = newLabel();
    	        emit(labCond + ":");
    	        generateExpr((Object[]) e[1]);
    	        String labDone = newLabel();
    	        instr("GoFalse", labDone);
    	        generateExpr((Object[]) e[2]);
    	        instr("Go", labCond);
    	        emit(labDone + ":");
    	        emit("(Return)");
    	        return;
    	    case "BODY":
    	        // ["BODY",exprs]
    	        generateExprR((Object[]) e[1]);
    	        return;
    	    default:
    	        throw new Error("Unknown intermediate code type: \"" + (String) e[0] + "\"");
    	    }
    	}
    	
    	
    	static void generateExpr( Object[] e )
    	{
    	    if (e[0] instanceof Object[])
    	    {
    	        Object[] exprs = (Object[]) e;
    	        int i;
    	        for (i=0; i<exprs.length; i++)
    	            generateExpr((Object[]) exprs[i]);
    	        return;
    	    }
    	    switch((String) e[0])
    	    {
    	    case "RETURN" :
    	        // ["RETURN",expr]
    	        generateExprR((Object[]) e[1]);
    	        return;
    	    case "STORE" :
    	        generateExprP((Object[]) e[2]);
    	        System.out.println("(Store " + e[1] + ")");
    	        return;
    	    case "OR":
    	        // ["OR",expr,expr]
    	        generateExpr((Object[]) e[1]);
    	        String labTrue = newLabel();
    	        System.out.println("(GoTrue " + labTrue + ")");
    	        generateExpr((Object[]) e[2]);
    	        System.out.println(labTrue + ":");
    	        return;
    	    case "AND":
    	        // ["AND",expr,expr]
    	        generateExpr((Object[]) e[1]);
    	        String labFalse = newLabel();
    	        instr("GoFalse", labFalse);
    	        generateExpr((Object[]) e[2]);
    	        System.out.println(labFalse + ":");
    	        return;
    	    case "NOT":
    	        // ["NOT",expr]
    	        Object[] expr = (Object[]) e[1];
    	        String nextInst = (String) expr[0];
    	        if (nextInst.equals("NOT"))
    	            generateExpr((Object []) expr[1]);
    	        else
    	            generateExpr(expr);
    	        System.out.println("(NOT)");
    	        return;
    	    case "CALL":
    	        // ["CALL",name,args]
    	        Object[] argsArr = (Object[]) e[2];
    	        if (argsArr[0] instanceof String) {
    	            generateExpr(argsArr);
    	            System.out.println("(Call #\"" + e[1] + "[f1]\" 1)");
    	            return;
    	        }
    	        int i;
    	        for (i=0; i < argsArr.length; i++)
    	        {
    	            if (i == 0)
    	                generateExpr((Object[]) argsArr[i]);
    	            else
    	                generateExprP((Object[]) argsArr[i]);
    	        }
    	        System.out.println("(Call #\"" + e[1] + "[f" + i + "]\" " + i + ")");
    	        return;
    	    case "FETCH":
    	        System.out.println("(Fetch " + (int)e[1] + ")");
    	        return;
    	    case "LITERAL":
    	        // ["LITERAL",string]
    	        instr("MakeVal", (String) e[1]);
    	        return;
    	    case "IF":
    	        // ["IF",cond,expr,elsepart]
    	        String labEnd = newLabel();
    	        generateIf((Object[]) e, labEnd);
    	        return;
    	    case "WHILE":
    	        // ["WHILE",cond,expr]
    	        String labCond = newLabel();
    	        emit(labCond + ":");
    	        generateExpr((Object[]) e[1]);
    	        String labDone = newLabel();
    	        instr("GoFalse", labDone);
    	        generateExpr((Object[]) e[2]);
    	        instr("Go", labCond);
    	        emit(labDone + ":");
    	        return;
    	    case "BODY":
    	        // ["BODY",exprs]
    	        generateExpr((Object[]) e[1]);
    	        return;
    	    default:
    	        throw new Error("Unknown intermediate code type: \"" + (String) e[0] + "\"");
    	    }
    	}
    	
    	static void generateExprP( Object[] e )
    	{
    	    if (e[0] instanceof Object[])
    	    {
    	        Object[] exprs = (Object[]) e;
    	        int i;
    	        for (i=0; i<exprs.length; i++)
    	            generateExprP((Object[]) exprs[i]);
    	        return;
    	    }
    	    switch((String) e[0])
    	    {
    	    case "RETURN" :
    	        // ["RETURN",expr]
    	        generateExprR((Object[]) e[1]);
    	        return;
    	    case "STORE" :
    	        generateExpr((Object[]) e[2]);
    	        System.out.println("(StoreP " + e[1] + ")");
    	        return;
    	    case "OR":
    	        // ["OR",expr,expr]
    	        generateExprP((Object[]) e[1]);
    	        String labTrue = newLabel();
    	        System.out.println("(GoTrue " + labTrue + ")");
    	        generateExpr((Object[]) e[2]);
    	        System.out.println(labTrue + ":");
    	        return;
    	    case "AND":
    	        // ["AND",expr,expr]
    	        generateExprP((Object[]) e[1]);
    	        String labFalse = newLabel();
    	        instr("GoFalse", labFalse);
    	        generateExpr((Object[]) e[2]);
    	        System.out.println(labFalse + ":");
    	        return;
    	    case "NOT":
    	        // ["NOT",expr]
    	        Object[] expr = (Object[]) e[1];
    	        String nextInst = (String) expr[0];
    	        if (nextInst.equals("NOT"))
    	        {
    	            generateExprP((Object[]) expr[1]);
    	            return;
    	        }
    	        generateExprP(expr);
    	        System.out.println("(NOT)");
    	        return;
    	    case "CALL":
    	        // ["CALL",name,args]
    	        Object[] argsArr = (Object[]) e[2];
    	        if (argsArr[0] instanceof String) {
    	            generateExprP(argsArr);
    	            System.out.println("(Call #\"" + e[1] + "[f1]\" 1)");
    	            return;
    	        }
    	        int i;
    	        for (i=0; i < argsArr.length; i++)
    	        {
    	                generateExprP((Object[]) argsArr[i]);
    	        }
    	        if (i == 0)
    	            emit("(Push)");
    	        System.out.println("(Call #\"" + e[1] + "[f" + i + "]\" " + i + ")");
    	        return;
    	    case "FETCH":
    	        System.out.println("(FetchP " + (int)e[1] + ")");
    	        return;
    	    case "LITERAL":
    	        // ["LITERAL",string]
    	        instr("MakeValP", (String) e[1]);
    	        return;
    	    case "IF":
    	        // ["IF",cond,expr,elsepart]
    	        String labEnd = newLabel();
    	        generateIfP((Object[]) e, labEnd);
    	        return;
    	    case "WHILE":
    	        // ["WHILE",cond,expr]
    	        String labCond = newLabel();
    	        emit(labCond + ":");
    	        generateExprP((Object[]) e[1]);
    	        String labDone = newLabel();
    	        instr("GoFalse", labDone);
    	        generateExpr((Object[]) e[2]);
    	        instr("Go", labCond);
    	        emit(labDone + ":");
    	        return;
    	    case "BODY":
    	        // ["BODY",exprs]
    	        generateExprP((Object[]) e[1]);
    	        return;
    	    default:
    	        throw new Error("Unknown intermediate code type: \"" + (String) e[0] + "\"");
    	    }
    	}
    	
    	static void generateIf(Object[] e, String labEnd)
    	{
    	    String inst = (String) e[0];
    	    if (!inst.equals("IF"))
    	    {
    	        // e er elsepart sem er ekki elsif
    	        generateExpr(e);
    	        emit(labEnd + ":");
    	        return;
    	    }
    	    // e er if setning meða eða án elsepart
    	    if (e[3] == null)
    	    {
    	        // e er if setning án elsepart
    	        generateExpr((Object[]) e[1]);
    	        instr("GoFalse", labEnd);
    	        generateExpr((Object[]) e[2]);
    	        emit(labEnd + ":");
    	        return;
    	    }
    	    // e er if setning með elsepart
    	    String labElse = newLabel();
    	    generateExpr((Object[]) e[1]);
    	    instr("GoFalse", labElse);
    	    generateExpr((Object[]) e[2]);
    	    instr("Go", labEnd);
    	    emit(labElse + ":");
    	    generateIf((Object[]) e[3], labEnd);
    	    return;
    	}
    	
    	static void generateIfP(Object[] e, String labEnd)
    	{
    	    String inst = (String) e[0];
    	    if (!inst.equals("IF"))
    	    {
    	        // elsepart sem er ekki elsif
    	        generateExprP(e);
    	        emit(labEnd + ":");
    	        return;
    	    }
    	    // if setning meða eða án elsepart
    	    if (e[3] == null)
    	    {
    	        // if setning án elsepart
    	        generateExprP((Object[]) e[1]);
    	        instr("GoFalse", labEnd);
    	        generateExprP((Object[]) e[2]);
    	        emit(labEnd + ":");
    	        return;
    	    }
    	    // if setning með elsepart
    	    String labElse = newLabel();
    	    generateExprP((Object[]) e[1]);
    	    instr("GoFalse", labElse);
    	    generateExpr((Object[]) e[2]);
    	    instr("Go", labEnd);
    	    emit(labElse + ":");
    	    generateIfP((Object[]) e[3], labEnd);
    	    return;
    	}
    	
    	static void generateIfR(Object[] e, String labEnd)
    	{
    	    String inst = (String) e[0];
    	    if (!inst.equals("IF"))
    	    {
    	        // elsepart sem er ekki elsif
    	        generateExprR(e);
    	        return;
    	    }
    	    // if setning meða eða án elsepart
    	    if (e[3] == null)
    	    {
    	        // if setning án elsepart
    	        generateExpr((Object[]) e[1]);
    	        instr("GoFalse", labEnd);
    	        generateExprR((Object[]) e[2]);
    	        return;
    	    }
    	    // if setning með elsepart
    	    String labElse = newLabel();
    	    generateExpr((Object[]) e[1]);
    	    instr("GoFalse", labElse);
    	    generateExprR((Object[]) e[2]);
    	    instr("Go", labEnd);
    	    emit(labElse + ":");
    	    generateIfR((Object[]) e[3], labEnd);
    	    return;
    	}
